// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/tax/v1beta1/tax.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the tax module.
type Params struct {
	// The universal epoch length in number of blocks, Every process for tax collecting is executed with this epoch_blocks
	// frequency
	EpochBlocks uint32 `protobuf:"varint,2,opt,name=epoch_blocks,json=epochBlocks,proto3" json:"epoch_blocks,omitempty" yaml:"epoch_blocks"`
	// Taxes parameter can be added, deleted, and modified through gov.ParameterChangeProposal, and for each purpose, the
	// changes in the existing tax list should be applied and set.
	Taxes []Tax `protobuf:"bytes,1,rep,name=taxes,proto3" json:"taxes" yaml:"taxes"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e026d951b912679, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEpochBlocks() uint32 {
	if m != nil {
		return m.EpochBlocks
	}
	return 0
}

func (m *Params) GetTaxes() []Tax {
	if m != nil {
		return m.Taxes
	}
	return nil
}

// Tax defines
type Tax struct {
	// name defines the name of the tax
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// rate specifies the distributing amount by ratio of total tax source
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate" yaml:"rate"`
	// tax_source_address defines the bech32-encoded address that source of the tax
	TaxSourceAddress string `protobuf:"bytes,3,opt,name=tax_source_address,json=taxSourceAddress,proto3" json:"tax_source_address,omitempty" yaml:"tax_source_address"`
	// collection_address defines the bech32-encoded address of the tax pool to distribute
	CollectionAddress string `protobuf:"bytes,4,opt,name=collection_address,json=collectionAddress,proto3" json:"collection_address,omitempty" yaml:"collection_address"`
	// start_time specifies the start time of the tax
	StartTime time.Time `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// end_time specifies the end time of the tax
	EndTime time.Time `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
}

func (m *Tax) Reset()      { *m = Tax{} }
func (*Tax) ProtoMessage() {}
func (*Tax) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e026d951b912679, []int{1}
}
func (m *Tax) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tax) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tax.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tax) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tax.Merge(m, src)
}
func (m *Tax) XXX_Size() int {
	return m.Size()
}
func (m *Tax) XXX_DiscardUnknown() {
	xxx_messageInfo_Tax.DiscardUnknown(m)
}

var xxx_messageInfo_Tax proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "cosmos.tax.v1beta1.Params")
	proto.RegisterType((*Tax)(nil), "cosmos.tax.v1beta1.Tax")
}

func init() { proto.RegisterFile("tendermint/tax/v1beta1/tax.proto", fileDescriptor_3e026d951b912679) }

var fileDescriptor_3e026d951b912679 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x63, 0xda, 0x95, 0xd5, 0x1d, 0x1a, 0x33, 0x93, 0xd6, 0x15, 0x2d, 0xae, 0x8c, 0x40,
	0xbd, 0x90, 0x68, 0xe3, 0x56, 0x09, 0x21, 0x02, 0x37, 0x38, 0x40, 0xe8, 0x01, 0x71, 0xa9, 0x9c,
	0xc4, 0x64, 0xd1, 0x92, 0xb8, 0x8a, 0x5d, 0x94, 0xbd, 0x01, 0x37, 0x76, 0xe4, 0xb8, 0xc7, 0xd9,
	0xb1, 0x47, 0xc4, 0x21, 0xa0, 0xf6, 0x0d, 0xfa, 0x04, 0xc8, 0x76, 0xda, 0x4e, 0xdd, 0x81, 0x4b,
	0xeb, 0xef, 0xfb, 0xff, 0xbf, 0x9f, 0x1d, 0xff, 0x13, 0xd8, 0x97, 0x2c, 0x8f, 0x58, 0x91, 0x25,
	0xb9, 0x74, 0x25, 0x2d, 0xdd, 0x6f, 0xa7, 0x01, 0x93, 0xf4, 0x54, 0xad, 0x9d, 0x49, 0xc1, 0x25,
	0x47, 0x28, 0xe4, 0x22, 0xe3, 0xc2, 0x51, 0x9d, 0x5a, 0xed, 0x1d, 0xc6, 0x3c, 0xe6, 0x5a, 0x76,
	0xd5, 0xca, 0x38, 0x7b, 0xc7, 0xc6, 0x39, 0x36, 0x42, 0x3d, 0x66, 0x24, 0xdb, 0x54, 0x6e, 0x40,
	0x05, 0x5b, 0xef, 0x11, 0xf2, 0x24, 0xaf, 0x75, 0x1c, 0x73, 0x1e, 0xa7, 0xcc, 0xd5, 0x55, 0x30,
	0xfd, 0xea, 0xca, 0x24, 0x63, 0x42, 0xd2, 0x6c, 0x62, 0x0c, 0xe4, 0x07, 0x80, 0xad, 0x0f, 0xb4,
	0xa0, 0x99, 0x40, 0x43, 0xb8, 0xc7, 0x26, 0x3c, 0x3c, 0x1f, 0x07, 0x29, 0x0f, 0x2f, 0x44, 0xf7,
	0x5e, 0x1f, 0x0c, 0x1e, 0x78, 0x47, 0xcb, 0x0a, 0x3f, 0xba, 0xa4, 0x59, 0x3a, 0x24, 0xb7, 0x55,
	0xe2, 0x77, 0x74, 0xe9, 0xe9, 0x0a, 0xbd, 0x81, 0x3b, 0x92, 0x96, 0x4c, 0x74, 0x41, 0xbf, 0x31,
	0xe8, 0x9c, 0x1d, 0x39, 0x77, 0x1f, 0xce, 0x19, 0xd1, 0xd2, 0x3b, 0xbc, 0xa9, 0xb0, 0xb5, 0xac,
	0xf0, 0x9e, 0x21, 0xea, 0x19, 0xe2, 0x9b, 0xd9, 0x61, 0xf3, 0xe7, 0x35, 0xb6, 0xc8, 0xac, 0x01,
	0x1b, 0x23, 0x5a, 0xa2, 0x27, 0xb0, 0x99, 0xd3, 0x8c, 0x75, 0x41, 0x1f, 0x0c, 0xda, 0xde, 0xfe,
	0xb2, 0xc2, 0x1d, 0x33, 0xa4, 0xba, 0xc4, 0xd7, 0x22, 0xfa, 0x08, 0x9b, 0x05, 0x95, 0x4c, 0x9f,
	0xb5, 0xed, 0xbd, 0x54, 0xf4, 0xdf, 0x15, 0x7e, 0x16, 0x27, 0xf2, 0x7c, 0x1a, 0x38, 0x21, 0xcf,
	0xea, 0xeb, 0xaa, 0xff, 0x9e, 0x8b, 0xe8, 0xc2, 0x95, 0x97, 0x13, 0x26, 0x9c, 0xb7, 0x2c, 0xdc,
	0x20, 0x15, 0x83, 0xf8, 0x1a, 0x85, 0xde, 0x41, 0x24, 0x69, 0x39, 0x16, 0x7c, 0x5a, 0x84, 0x6c,
	0x4c, 0xa3, 0xa8, 0x60, 0x42, 0x74, 0x1b, 0x7a, 0x83, 0x93, 0x65, 0x85, 0x8f, 0xd7, 0x47, 0xdf,
	0xf2, 0x10, 0xff, 0xa1, 0xa4, 0xe5, 0x27, 0xdd, 0x7b, 0x6d, 0x5a, 0xe8, 0x3d, 0x44, 0x21, 0x4f,
	0x53, 0x16, 0xca, 0x84, 0xe7, 0x6b, 0x58, 0x73, 0x1b, 0x76, 0xd7, 0x43, 0xfc, 0x83, 0x4d, 0x73,
	0x45, 0xfb, 0x0c, 0xa1, 0x90, 0xb4, 0x90, 0x63, 0x95, 0x62, 0x77, 0xa7, 0x0f, 0x06, 0x9d, 0xb3,
	0x9e, 0x63, 0x22, 0x76, 0x56, 0x11, 0x3b, 0xa3, 0x55, 0xc4, 0xde, 0x49, 0x7d, 0xdb, 0x07, 0x66,
	0x97, 0xcd, 0x2c, 0xb9, 0xfa, 0x83, 0x81, 0xdf, 0xd6, 0x0d, 0x65, 0x47, 0x3e, 0xdc, 0x65, 0x79,
	0x64, 0xb8, 0xad, 0xff, 0x72, 0x1f, 0xd7, 0xdc, 0xfd, 0xfa, 0xbd, 0xa8, 0x27, 0x0d, 0xf5, 0x3e,
	0xcb, 0x23, 0x65, 0x1d, 0xee, 0x7e, 0xbf, 0xc6, 0x96, 0x8a, 0xd4, 0x7b, 0x75, 0x33, 0xb7, 0xc1,
	0x6c, 0x6e, 0x83, 0xbf, 0x73, 0x1b, 0x5c, 0x2d, 0x6c, 0x6b, 0xb6, 0xb0, 0xad, 0x5f, 0x0b, 0xdb,
	0xfa, 0xf2, 0xf4, 0x56, 0x52, 0x5b, 0x5f, 0x4c, 0xa9, 0x7f, 0x75, 0x58, 0x41, 0x4b, 0x1f, 0xe2,
	0xc5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x95, 0x98, 0x62, 0x2f, 0x56, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochBlocks != 0 {
		i = encodeVarintTax(dAtA, i, uint64(m.EpochBlocks))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Taxes) > 0 {
		for iNdEx := len(m.Taxes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Taxes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTax(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Tax) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tax) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tax) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTax(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTax(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.CollectionAddress) > 0 {
		i -= len(m.CollectionAddress)
		copy(dAtA[i:], m.CollectionAddress)
		i = encodeVarintTax(dAtA, i, uint64(len(m.CollectionAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TaxSourceAddress) > 0 {
		i -= len(m.TaxSourceAddress)
		copy(dAtA[i:], m.TaxSourceAddress)
		i = encodeVarintTax(dAtA, i, uint64(len(m.TaxSourceAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTax(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTax(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTax(dAtA []byte, offset int, v uint64) int {
	offset -= sovTax(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Taxes) > 0 {
		for _, e := range m.Taxes {
			l = e.Size()
			n += 1 + l + sovTax(uint64(l))
		}
	}
	if m.EpochBlocks != 0 {
		n += 1 + sovTax(uint64(m.EpochBlocks))
	}
	return n
}

func (m *Tax) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTax(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovTax(uint64(l))
	l = len(m.TaxSourceAddress)
	if l > 0 {
		n += 1 + l + sovTax(uint64(l))
	}
	l = len(m.CollectionAddress)
	if l > 0 {
		n += 1 + l + sovTax(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTax(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovTax(uint64(l))
	return n
}

func sovTax(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTax(x uint64) (n int) {
	return sovTax(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTax
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTax
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taxes = append(m.Taxes, Tax{})
			if err := m.Taxes[len(m.Taxes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochBlocks", wireType)
			}
			m.EpochBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTax(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTax
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tax) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTax
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tax: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tax: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxSourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxSourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTax
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTax
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTax
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTax
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTax
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTax(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTax
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTax(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTax
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTax
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTax
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTax
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTax
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTax
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTax        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTax          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTax = fmt.Errorf("proto: unexpected end of group")
)
